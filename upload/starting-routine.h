/* 
 * File:   starting-routine.h
 * Author: Henry
 *
 * Created on July 24, 2014, 12:09 PM
 */

#ifndef STARTING_ROUTINE_H
#define	STARTING_ROUTINE_H

#ifdef	__cplusplus
extern "C" {
#endif
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <kovan/kovan.h>
#include <sys/time.h>
#include <string.h>
#include <assert.h>

#include "song.h"
#include "Constants.h"
#include "claw-utils.h"
#include "drive-utils.h"


#define DRIVE_SPEED_FORWARD -7
#define DRIVE_SPEED_BACKWARD 11

#define SPIN_SPEED 3
    int abs(int);
    void jerk();
    
    void runFunctionASUNK(void* arg,void (*func)(void*)) {
        
    }

    long getMS(struct timeval time) {
        return time.tv_sec * 1000 + time.tv_usec / 1000;
    }

    
    void setServoInTime(int servoPort, int pos, int timeMS) {
        const int count = 120;
        int oldPos = get_servo_position(servoPort);
        int tdelta = pos - oldPos;
        int delta = tdelta / count;
        int sleep = timeMS / count;
        
        int cpos = oldPos;
        
        for (int i = 0; i < count; i++) {
            cpos += delta;
            set_servo_position(servoPort, cpos);
            msleep(sleep);
            
        }
        
    }
    void runAutogeneratedCode1() {
        create_drive_straight(0);

        create_spin_CW(150);

        msleep(630);

        create_drive_straight(0);

        create_drive_straight(-500);

        msleep(1320);

        create_drive_straight(0);

        create_spin_CCW(150);

        msleep(1090);

        create_drive_straight(0);

        create_drive_straight(500);

        msleep(1240);

        create_drive_straight(0);

        create_spin_CW(150);

        msleep(280);

        create_drive_straight(0);

        /*create_spin_CW(150);

        msleep(230);

        create_drive_straight(0);*/

        create_drive_straight(500); //back into the slot
        //set_servo_position(CUBE_KNOCK_PORT, CUBE_KNOCK_UP);
        msleep(500); //990
        set_servo_position(CUBE_KNOCK_PORT, CUBE_KNOCK_UP2);
        create_drive_straight(0);

        create_spin_CW(110);


        msleep(500); //HOW much to back off from the wall  250 is perfect  was 100

        create_drive_straight(0);
        
        raise_claw_to(CLAW_MIDDLE_POSITION);
        
        //exit(0);
        //create_spin_CW(-100);

        //msleep(250);
    }

    void driveLeft() {
        create_drive(-500, 2000);

    }

    void driveRight() {
        create_drive(-500, -2000);
    }

    void cDriveStraight() {
        create_drive_straight(-500);
    }

    int abs(int val) {
        return val < 0 ? -val : val;
    }

    void driveAdaptive(long timeoutMS) {
        struct timeval startTime;
        gettimeofday(&startTime, NULL);
        struct timeval currentTime;
        gettimeofday(&currentTime, NULL);

        int targetValue = 900;
        int errorMargen = 20;
        int currentDistance;

        cDriveStraight();
        while (getMS(currentTime) - getMS(startTime) < timeoutMS) {
            currentDistance = analog(RAMP_TOP_HAT);

            if (abs(currentDistance - targetValue) < errorMargen) {
                cDriveStraight();
            } else if (1) {
                cDriveStraight();
            } else {
                driveRight();
            }
            msleep(100);
            gettimeofday(&currentTime, NULL);
        }
        create_drive_straight(0);
    }

    void runAutogeneratedCode2(bool slow) {
        create_drive_straight(0);
        //driveAdaptive(1170);


        create_drive_straight(-500);
        msleep(770);
        create_drive_straight(0);

        //create_drive(-500, -2000);

        setServoInTime(CUBE_KNOCK_PORT, CUBE_KNOCK_DOWN, 800);
        msleep(100);
        create_drive_straight(-400);

        msleep(300);
        //create_drive(-400, -2000);
        create_drive_straight(-500);
        msleep(250);
        create_drive_straight(-400);
        //create_drive(-400, 2000);
        msleep(751); //time before putting up cube knock //Was 1341
        set_servo_position(CUBE_KNOCK_PORT, CUBE_KNOCK_UP);

        //driveAdaptive(1501);
        driveLeft();
        msleep(300);
        cDriveStraight();


        msleep(871);

        create_drive_straight(0);
        setServoInTime(CUBE_KNOCK_PORT, CUBE_KNOCK_DOWN, 700);


        create_spin_CCW(150);
        msleep(700);

        create_drive_straight(0);
        cDriveStraight();
        msleep(100);

        create_drive_straight(0);
        
    }

    void runAutogeneratedCode3() {
        create_drive_straight(0);
        create_drive_straight(0);

        create_spin_CCW(150);

        msleep(600);
        
        create_drive_straight(0);
        cDriveStraight();
        msleep(50);
        create_drive_straight(0);
        
        jerk();
        
        
        raise_claw_to(CLAW_UP_POSITION);
        create_drive_straight(500);

        msleep(1970);

        
        create_spin_CCW(150);
        
        msleep(1000);
        
        create_drive_straight(500);

        msleep(1670);
        
        
        
        create_spin_CCW(150);
        
        while (analog(3) > 700) {} //Line up against PVC corner after jerk
        create_spin_CW(150);//Bule cobe lineup turn
        msleep(770);
        create_drive_straight(0);

        

        create_drive_straight(0);

        create_drive_straight(-500);

        msleep(1170);
        
        create_drive(-500, 500);  //Blue cube catch
        msleep(500);
        create_drive_straight(0);
        
        create_drive_straight(0);
        
        
        /*create_drive_straight(500);

        msleep(200);*/

        create_drive_straight(0);
       
        create_drive_straight(0);

        create_spin_CW(150);

        msleep(2631);  //Corner setup turn (almost 180)

        create_drive_straight(0);

        create_drive_straight(500);
        while (!(get_create_lbump() || get_create_rbump())) {

        }
        
        msleep(1300);

        create_drive_straight(0);
        
        create_spin_CCW(150);
        
        while (analog(3) > 700) {} //Line up against PVC
        create_spin_CW(150);
        msleep(620);
        create_drive_straight(0);
        
        create_drive_straight(0);

    }

    void jerk() {
        /*for (int i = 0; i < 2; i++) {
            create_drive_straight(-500);
            msleep(300);
            create_drive_straight(500);
            msleep(500);
        }*/
        create_drive_straight(0);
        for (int i = 0; i < 5; i++) {
            create_spin_CCW(500);
            msleep(100);
            create_spin_CW(500);
            msleep(100);
        }

        create_drive_straight(0);

    }

    void preformStartingRoutine() {
        //char s[20];
        raise_claw_to(CLAW_UP_POSITION);
        //was down
        set_servo_position(CUBE_KNOCK_PORT, CUBE_KNOCK_DOWN);
        //set_servo_position(CUBE_KNOCK_PORT, CUBE_KNOCK_UP2);
        enable_servo(CUBE_KNOCK_PORT);

        playSong();
        printf("GO!!!!!\n");
        /*
                //this is the code to start half way through
                set_servo_position(CUBE_KNOCK_PORT, CUBE_KNOCK_UP2);
                runAutogeneratedCode2(false);
                create_drive_straight(300);
                msleep(1100);
                create_drive_straight(0);
                jerk();
                return;
         */
        runAutogeneratedCode1();
        create_drive_straight(0);

        set_servo_position(CUBE_KNOCK_PORT, CUBE_KNOCK_UP2);
        //enable_servo(CUBE_KNOCK_PORT);
        printf("skipping input.\n");
        /*scanf("%s", s);
        if (strcmp(s, "exit") == 0) {
            return;
        } else if (strcmp(s, "slow") == 0) {
            runAutogeneratedCode2(true);
        } else {
            runAutogeneratedCode2(false);
        }*/

        runAutogeneratedCode2(false);

        //char s[20];
        //scanf("%s\n",s);
        set_servo_position(CUBE_KNOCK_PORT, CUBE_KNOCK_UP);
        runAutogeneratedCode3();

    }


#ifdef	__cplusplus
}
#endif

#endif	/* STARTING_ROUTINE_H */

